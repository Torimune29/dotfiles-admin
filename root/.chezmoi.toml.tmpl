
{{- /* chezmoi */ -}}
{{- $chezmoiForce := or (has "--force" .chezmoi.args) (has "--force=true" .chezmoi.args) -}}
{{- $interactive := and stdinIsATTY (not $chezmoiForce) -}}

{{- $exitCode := 128 }}

{{- /* User request */ -}}
{{- $installDocker := false -}}
{{- $installDevelopmentEssentials := false -}}
{{- $installServerEssentials := false -}}
{{- $adminUserName := "admin" -}}
{{- $adminPassword := randAscii 12 -}}
{{- $adminGroup := "wheel" -}}

{{- $clean := false -}}

{{- /* Proxy */ -}}
{{- $underProxy := false -}}
{{- $proxyHttp := "" -}}
{{- $proxyHttps := "" -}}
{{- $proxyFtp := "" -}}
{{- $proxyNo := "" -}}

{{- if $interactive -}}
{{-   $installDocker = promptBool "Install dockerd" $installDocker -}}
{{-   $installDevelopmentEssentials = promptBool "Install development essentials" $installDevelopmentEssentials -}}

{{-   $installServerEssentials = promptBool "Install server essentials" $installServerEssentials -}}
{{-   if $installServerEssentials -}}
{{-     $adminUserName = promptString "Admin User Name" $adminUserName -}}
{{-     $adminPassword = promptString "Admin User Password" $adminPassword -}}
{{-     $adminGroup = promptString "Admin Group" $adminGroup -}}
{{-     writeToStdout (printf "Set Admin Info as \n'Admin User Name:%s'\n'Admin Password:%s'\n'Admin Group:%s'\n'" $adminUserName $adminPassword $adminGroup) -}}
{{-     if not (promptBool "OK" true) -}}
{{-       writeToStdout (printf "Cancel.\n") -}}
{{-       exit $exitCode -}}
{{-     end -}}
{{-   end -}}

{{-   $underProxy = promptBool "Under Proxy" $underProxy -}}
{{-   if $underProxy -}}
{{-     if promptBool "Has HTTP Proxy" false -}}
{{-       $proxyHttp  = promptString "Input HTTP Proxy"   "http://username:password@domain:port" -}}
{{-     end }}
{{-     if promptBool "Has HTTPS Proxy" false -}}
{{-       $proxyHttps = promptString "Input HTTPS Proxy"  "http://username:password@domain:port" -}}
{{-     end }}
{{-     if promptBool "Has FTP Proxy" false -}}
{{-       $proxyFtp   = promptString "Input FTP Proxy"    "ftp://username:password@domain:port" -}}
{{-     end }}
{{-     if promptBool "Has No Proxy" false -}}
{{-       $proxyNo    = promptString "Input No Proxy"     (cat "127.0.0.1" "localhost" .chezmoi.hostname | replace " " ",") -}}
{{-     end }}
{{-     writeToStdout (printf "Set proxy as \n'http proxy:%s'\n'https proxy:%s'\n'ftp proxy:%s'\n'no proxy:%s'\n" $proxyHttp $proxyHttps $proxyFtp $proxyNo) -}}
{{-     if not (promptBool "OK" true) -}}
{{-       writeToStdout (printf "Cancel.\n") -}}
{{-       exit $exitCode -}}
{{-     end -}}
{{-   end -}}

{{- end -}}

sourceDir = "/etc/chezmoi/data"
destDir = "/"

[data]
  # public DNS server
  #  check faster: https://www.dnsperf.com/#!dns-resolvers
  #    2022/12 cloudflare
  publicDnsPrimary =  "1.1.1.1"
  publicDnsSecondary = "1.0.0.1"

  # Proxy
  underProxy = {{ $underProxy }}
  {{ if $underProxy -}}
  proxyHttp = {{ $proxyHttp | quote }}
  proxyHttps = {{ $proxyHttps | quote }}
  proxyFtp = {{ $proxyFtp | quote }}
  proxyNo = {{ $proxyNo | quote }}
  {{ end -}}

  # system facts
  distId = {{ .chezmoi.osRelease.id | quote }}
  distVersionId = {{ .chezmoi.osRelease.versionID | quote }}
  isWsl = {{ stat "/proc/sys/fs/binfmt_misc/WSLInterop" | not | not }}
  isDocker = {{ stat "/.dockerenv" | not | not }}
  isDevcontainer = {{ env "REMOTE_CONTAINERS" | not | not }}

  {{ $initProcess:= output "cat" "/proc/1/comm" | trim -}}
  {{ if eq $initProcess "systemd" -}}
  daemonManager = "systemd"
  {{ else if eq $initProcess "init" -}}
  daemonManager = "sysvinit-like"
  {{ else -}}
  daemonManager = ""
  {{ end -}}

  {{ if lookPath "apt-get" | not | not -}}
  packageManager = "apt"
  install = "DEBCONF_NOWARNINGS=yes DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends"
  update = "apt-get update"
  {{ else if lookPath "yum" | not | not -}}
  packageManager = "yum"
  install = "yum install -y"
  update = "yum check-update | true"  # returns 100. see: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-keeping_your_system_up-to-date#sec-Using_the_Security_Features_of_Yum
  {{ else if lookPath "dnf" | not | not -}}
  packageManager = "dnf"
  install = "dnf install -y"
  update = "dnf check-update"
  {{ else if lookPath "microdnf" | not | not -}}
  packageManager = "dnf"
  install = "microdnf install -y"
  update = "microdnf update"
  {{ else if lookPath "zypper" | not | not -}}
  packageManager = "zypper"
  install = "zypper install -y"
  update = "zypper refresh"
  {{ else if lookPath "apk" | not | not -}}
  packageManager = "apk"
  install = "apk add --no-cache"
  update = "apk update"
  {{ end -}}

  # request facts
  requestDocker = {{ $installDocker }}
  requestInteractiveEssentials = {{ or $installDevelopmentEssentials $installServerEssentials }}
  requestDevelopmentEssentials = {{ $installDevelopmentEssentials }}

  requestServerEssentials = {{ $installServerEssentials }}
  requestServerAdminUserName = {{ $adminUserName | quote }}
  requestServerAdminPassword = {{ $adminPassword | quote }}
  requestServerAdminGroup = {{ $adminGroup | quote }}
